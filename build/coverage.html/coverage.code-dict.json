{"/home/travis/build/npmtest/node-npmtest-multiplex/test.js":"/* istanbul instrument in package npmtest_multiplex */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-multiplex/lib.npmtest_multiplex.js":"/* istanbul instrument in package npmtest_multiplex */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_multiplex = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_multiplex = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-multiplex/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-multiplex && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_multiplex */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_multiplex\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_multiplex.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_multiplex.rollup.js'] =\n            local.assetsDict['/assets.npmtest_multiplex.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_multiplex.__dirname + '/lib.npmtest_multiplex.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-multiplex/node_modules/multiplex/index.js":"var stream = require('readable-stream')\nvar varint = require('varint')\nvar EventEmitter = require('events').EventEmitter\nvar xtend = require('xtend')\nvar inherits = require('inherits')\nvar duplexify = require('duplexify')\n\nvar SIGNAL_FLUSH = new Buffer([0])\n\nvar empty = new Buffer(0)\nvar pool = new Buffer(10 * 1024)\nvar used = 0\n\nvar Channel = function (name, plex, opts) {\n  if (!opts) opts = {}\n  stream.Duplex.call(this)\n\n  this.name = name\n  this.channel = 0\n  this.initiator = false\n  this.chunked = !!opts.chunked\n  this.halfOpen = !!opts.halfOpen\n  this.destroyed = false\n  this.finalized = false\n\n  this._multiplex = plex\n  this._dataHeader = 0\n  this._opened = false\n  this._awaitDrain = 0\n  this._lazy = !!opts.lazy\n\n  var finished = false\n  var ended = false\n\n  this.once('end', function () {\n    this._read() // trigger drain\n    if (this.destroyed) return\n    ended = true\n    if (finished) this._finalize()\n    else if (!this.halfOpen) this.end()\n  })\n\n  this.once('finish', function onfinish () {\n    if (this.destroyed) return\n    if (!this._opened) {\n      this.once('open', onfinish)\n    } else {\n      if (this._lazy && this.initiator) this._open()\n      this._multiplex._send(this.channel << 3 | (this.initiator ? 4 : 3), null)\n      finished = true\n      if (ended) this._finalize()\n    }\n  })\n}\n\ninherits(Channel, stream.Duplex)\n\nChannel.prototype.destroy = function (err) {\n  this._destroy(err, true)\n}\n\nChannel.prototype._destroy = function (err, local) {\n  if (this.destroyed) return\n  this.destroyed = true\n  if (err && (!local || EventEmitter.listenerCount(this, 'error'))) this.emit('error', err)\n  this.emit('close')\n  if (local && this._opened) {\n    if (this._lazy && this.initiator) this._open()\n    try {\n      this._multiplex._send(this.channel << 3 | (this.initiator ? 6 : 5), err ? new Buffer(err.message) : null)\n    } catch (e) {}\n  }\n  this._finalize()\n}\n\nChannel.prototype._finalize = function () {\n  if (this.finalized) return\n  this.finalized = true\n  this.emit('finalize')\n}\n\nChannel.prototype._write = function (data, enc, cb) {\n  if (!this._opened) {\n    this.once('open', this._write.bind(this, data, enc, cb))\n    return\n  }\n  if (this.destroyed) return cb()\n\n  if (this._lazy && this.initiator) this._open()\n\n  var drained = this._multiplex._send(this._dataHeader, data)\n  if (drained) cb()\n  else this._multiplex._ondrain.push(cb)\n}\n\nChannel.prototype._read = function () {\n  if (this._awaitDrain) {\n    var drained = this._awaitDrain\n    this._awaitDrain = 0\n    this._multiplex._onchanneldrain(drained)\n  }\n}\n\nChannel.prototype._open = function () {\n  var buf = null\n  if (Buffer.isBuffer(this.name)) buf = this.name\n  else if (this.name !== this.channel.toString()) buf = new Buffer(this.name)\n  this._lazy = false\n  this._multiplex._send(this.channel << 3 | 0, buf)\n}\n\nChannel.prototype.open = function (channel, initiator) {\n  this.channel = channel\n  this.initiator = initiator\n  this._dataHeader = channel << 3 | (initiator ? 2 : 1)\n  this._opened = true\n  if (!this._lazy && this.initiator) this._open()\n  this.emit('open')\n}\n\nvar Multiplex = function (opts, onchannel) {\n  if (!(this instanceof Multiplex)) return new Multiplex(opts, onchannel)\n  stream.Duplex.call(this)\n\n  if (typeof opts === 'function') {\n    onchannel = opts\n    opts = null\n  }\n  if (!opts) opts = {}\n  if (onchannel) this.on('stream', onchannel)\n\n  this.destroyed = false\n  this.limit = opts.limit || 0\n\n  this._corked = 0\n  this._options = opts\n  this._binaryName = !!opts.binaryName\n  this._local = []\n  this._remote = []\n  this._list = this._local\n  this._receiving = null\n  this._chunked = false\n  this._state = 0\n  this._type = 0\n  this._channel = 0\n  this._missing = 0\n  this._message = null\n  this._buf = new Buffer(this.limit ? varint.encodingLength(this.limit) : 100)\n  this._ptr = 0\n  this._awaitChannelDrains = 0\n  this._onwritedrain = null\n  this._ondrain = []\n  this._finished = false\n\n  this.on('finish', this._clear)\n}\n\ninherits(Multiplex, stream.Duplex)\n\nMultiplex.prototype.createStream = function (name, opts) {\n  if (this.destroyed) throw new Error('Multiplexer is destroyed')\n  var id = this._local.indexOf(null)\n  if (id === -1) id = this._local.push(null) - 1\n  var channel = new Channel(this._name(name || id.toString()), this, xtend(this._options, opts))\n  return this._addChannel(channel, id, this._local)\n}\n\nMultiplex.prototype.receiveStream = function (name, opts) {\n  if (this.destroyed) throw new Error('Multiplexer is destroyed')\n  if (name === undefined || name === null) throw new Error('Name is needed when receiving a stream')\n  var channel = new Channel(this._name(name), this, xtend(this._options, opts))\n  if (!this._receiving) this._receiving = {}\n  if (this._receiving[channel.name]) throw new Error('You are already receiving this stream')\n  this._receiving[channel.name] = channel\n  return channel\n}\n\nMultiplex.prototype.createSharedStream = function (name, opts) {\n  return duplexify(this.createStream(name, xtend(opts, {lazy: true})), this.receiveStream(name, opts))\n}\n\nMultiplex.prototype._name = function (name) {\n  if (!this._binaryName) return name.toString()\n  return Buffer.isBuffer(name) ? name : new Buffer(name)\n}\n\nMultiplex.prototype._send = function (header, data) {\n  var len = data ? data.length : 0\n  var oldUsed = used\n  var drained = true\n\n  varint.encode(header, pool, used)\n  used += varint.encode.bytes\n  varint.encode(len, pool, used)\n  used += varint.encode.bytes\n\n  drained = this.push(pool.slice(oldUsed, used))\n\n  if (pool.length - used < 100) {\n    pool = new Buffer(10 * 1024)\n    used = 0\n  }\n\n  if (data) drained = this.push(data)\n  return drained\n}\n\nMultiplex.prototype._addChannel = function (channel, id, list) {\n  while (list.length <= id) list.push(null)\n  list[id] = channel\n  channel.on('finalize', function () {\n    list[id] = null\n  })\n\n  channel.open(id, list === this._local)\n\n  return channel\n}\n\nMultiplex.prototype._writeVarint = function (data, offset) {\n  for (offset; offset < data.length; offset++) {\n    if (this._ptr === this._buf.length) return this._lengthError(data)\n    this._buf[this._ptr++] = data[offset]\n    if (!(data[offset] & 0x80)) {\n      if (this._state === 0) {\n        var header = varint.decode(this._buf)\n        this._type = header & 7\n        this._channel = header >> 3\n        this._list = this._type & 1 ? this._local : this._remote\n        var chunked = this._list.length > this._channel && this._list[this._channel] && this._list[this._channel].chunked\n        this._chunked = !!(this._type === 1 || this._type === 2) && chunked\n      } else {\n        this._missing = varint.decode(this._buf)\n        if (this.limit && this._missing > this.limit) return this._lengthError(data)\n      }\n      this._state++\n      this._ptr = 0\n      return offset + 1\n    }\n  }\n  return data.length\n}\n\nMultiplex.prototype._lengthError = function (data) {\n  this.destroy(new Error('Incoming message is too big'))\n  return data.length\n}\n\nMultiplex.prototype._writeMessage = function (data, offset) {\n  var free = data.length - offset\n  var missing = this._missing\n\n  if (!this._message) {\n    if (missing <= free) { // fast track - no copy\n      this._missing = 0\n      this._push(data.slice(offset, offset + missing))\n      return offset + missing\n    }\n    if (this._chunked) {\n      this._missing -= free\n      this._push(data.slice(offset, data.length))\n      return data.length\n    }\n    this._message = new Buffer(missing)\n  }\n\n  data.copy(this._message, this._ptr, offset, offset + missing)\n\n  if (missing <= free) {\n    this._missing = 0\n    this._push(this._message)\n    return offset + missing\n  }\n\n  this._missing -= free\n  this._ptr += free\n\n  return data.length\n}\n\nMultiplex.prototype._push = function (data) {\n  if (!this._missing) {\n    this._ptr = 0\n    this._state = 0\n    this._message = null\n  }\n\n  if (this._type === 0) { // open\n    if (this.destroyed || this._finished) return\n\n    var name = this._binaryName ? data : (data.toString() || this._channel.toString())\n    var channel\n\n    if (this._receiving && this._receiving[name]) {\n      channel = this._receiving[name]\n      delete this._receiving[name]\n      this._addChannel(channel, this._channel, this._list)\n    } else {\n      channel = new Channel(name, this, this._options)\n      this.emit('stream', this._addChannel(channel, this._channel, this._list), channel.name)\n    }\n    return\n  }\n\n  var stream = this._list[this._channel]\n  if (!stream) return\n\n  switch (this._type) {\n    case 5: // local error\n    case 6: // remote error\n    stream._destroy(new Error(data.toString() || 'Channel destroyed'), false)\n    return\n\n    case 3: // local end\n    case 4: // remote end\n    stream.push(null)\n    return\n\n    case 1: // local packet\n    case 2: // remote packet\n    if (!stream.push(data)) {\n      this._awaitChannelDrains++\n      stream._awaitDrain++\n    }\n    return\n  }\n}\n\nMultiplex.prototype._onchanneldrain = function (drained) {\n  this._awaitChannelDrains -= drained\n  if (this._awaitChannelDrains) return\n  var ondrain = this._onwritedrain\n  this._onwritedrain = null\n  if (ondrain) ondrain()\n}\n\nMultiplex.prototype._write = function (data, enc, cb) {\n  if (this._finished) return cb()\n  if (this._corked) return this._onuncork(this._write.bind(this, data, enc, cb))\n  if (data === SIGNAL_FLUSH) return this._finish(cb)\n\n  var offset = 0\n\n  while (offset < data.length) {\n    if (this._state === 2) offset = this._writeMessage(data, offset)\n    else offset = this._writeVarint(data, offset)\n  }\n  if (this._state === 2 && !this._missing) this._push(empty)\n\n  if (this._awaitChannelDrains) this._onwritedrain = cb\n  else cb()\n}\n\nMultiplex.prototype._finish = function (cb) {\n  var self = this\n  this._onuncork(function () {\n    if (self._writableState.prefinished === false) self._writableState.prefinished = true\n    self.emit('prefinish')\n    self._onuncork(cb)\n  })\n}\n\nMultiplex.prototype.cork = function () {\n  if (++this._corked === 1) this.emit('cork')\n}\n\nMultiplex.prototype.uncork = function () {\n  if (this._corked && --this._corked === 0) this.emit('uncork')\n}\n\nMultiplex.prototype.end = function (data, enc, cb) {\n  if (typeof data === 'function') return this.end(null, null, data)\n  if (typeof enc === 'function') return this.end(data, null, enc)\n  if (data) this.write(data)\n  if (!this._writableState.ending) this.write(SIGNAL_FLUSH)\n  return stream.Writable.prototype.end.call(this, cb)\n}\n\nMultiplex.prototype._onuncork = function (fn) {\n  if (this._corked) this.once('uncork', fn)\n  else fn()\n}\n\nMultiplex.prototype._read = function () {\n  while (this._ondrain.length) this._ondrain.shift()()\n}\n\nMultiplex.prototype._clear = function () {\n  if (this._finished) return\n  this._finished = true\n\n  var list = this._local.concat(this._remote)\n\n  this._local = []\n  this._remote = []\n\n  list.forEach(function (stream) {\n    if (stream) stream._destroy(null, false)\n  })\n\n  this.push(null)\n}\n\nMultiplex.prototype.finalize = function () {\n  this._clear()\n}\n\nMultiplex.prototype.destroy = function (err) {\n  if (this.destroyed) return\n  this.destroyed = true\n  this._clear()\n  if (err) this.emit('error', err)\n  this.emit('close')\n}\n\nmodule.exports = Multiplex\n","/home/travis/build/npmtest/node-npmtest-multiplex/node_modules/multiplex/bench.js":"var multiplex = require('./')\nvar time = Date.now()\n\nvar plex = multiplex(function (stream, name) {\n  stream.pipe(stream)\n})\n\nplex.pipe(plex)\n\nvar stream = plex.createStream()\nvar hello = new Buffer(16 * 1024 - 1)\nvar sent = 100000\nvar rcvd = 0\n\n// the bench is just to test the actual parsing speed on multiplex\n// don't put too much weight into it - its mainly used to spot performance regressions between commits\nstream.on('data', function (data) {\n  rcvd += data.length\n  if (!--sent) {\n    var delta = Date.now() - time\n    console.log('%d b/s (%d ms)', Math.floor(100000 * rcvd / delta) / 100, delta)\n    process.exit(0)\n  }\n})\n\nstream.pipe(stream)\nstream.write(hello)\n"}